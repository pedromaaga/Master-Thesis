!**************************************************************************!
! Project
! Authors: Pedro Magalh√£es 
! Units: IS
! Last review: 08/11/2024
! Status: FINALIZED
!**************************************************************************!
!--------------------------------------------------------------------------!
!****_                    0. QUESTIONS				      _****!
!									   !
!	   								   !
!--------------------------------------------------------------------------!
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    1. ANSYS STARTUP			      _****!
!			  Status: OK                                       !
!--------------------------------------------------------------------------!
!****_ 1.1 Clear model [OK]
FINISH										! Finalize open processes
/CLEAR,NOSTART  								! clear model
KEYW,PR_STRUC,1 								! Structural Analysis
KEYW,PR_ELMAG,1 								! Electromagnetic Analysis
KEYW,MAGELC,1   								! Magnetic-Electro Analysis
KEYW,PR_MULTI,1 								! Multi Analysis

!***_
!****_ 1.2 Solution Type [OK]
SOLUTION_TYPE		= 0							! Choose the analyse that you want to do
										! 0 - Modal, 1 - Harmonic
										
!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    2. INPUT PARAMETERS                         _****!
!			  Status: OK		  		           !
!--------------------------------------------------------------------------!
*DIM,GEOMETRIC_PARAMETERS,ARRAY,5,1, , , ,

*VREAD,GEOMETRIC_PARAMETERS,'Input_GeometricParameters','txt',' ',IJK,5,1,1,,
(1F10.6)

!****_ 2.0 Quantities of patches [OK]
QNTD_PATCHES	= GEOMETRIC_PARAMETERS(1,1)					! Number of patches 
!***_
!****_ 2.1 Geometric parameters [OK]
!	Plate Dimension
LPL		= GEOMETRIC_PARAMETERS(2,1)					! [m] Length
WPL		= GEOMETRIC_PARAMETERS(3,1)					! [m] Width
TPL		= 0.001								! [m] Thickness
!
!	Patch Dimension
LPA		= GEOMETRIC_PARAMETERS(4,1)					! [m] Length 
WPA		= GEOMETRIC_PARAMETERS(5,1)					! [m] Width
TPA		= 0.0005							! [m] Thickness
!
!***_
!****_ 2.2 Eletrical parameters [OK]
! Type of Shunt (it works just in the harmonic analyse)
*IF,SOLUTION_TYPE,EQ,1,THEN
SHUNT_TYPE		= 0							! 0 - Multiple, 1 - Single
										! IF you select single shunt, you need to give the patches with positive modal charges

*IF,SHUNT_TYPE,EQ,0,THEN							! Multiple
	QNT_CIRCUITS	= QNTD_PATCHES
*ELSE										! Single
	QNT_CIRCUITS	= 1
	
	QNT_POSITIVE_MODAL_PATCHES = 1
	*DIM,POSITIVE_MODAL_PATCHES,ARRAY,QNT_POSITIVE_MODAL_PATCHES,1, , , ,
	POSITIVE_MODAL_PATCHES(1,1) = 1
	!POSITIVE_MODAL_PATCHES(2,1) = 2
	!POSITIVE_MODAL_PATCHES(3,1) = 3
	!POSITIVE_MODAL_PATCHES(4,1) = 4
	!POSITIVE_MODAL_PATCHES(5,1) = 5
	!POSITIVE_MODAL_PATCHES(6,1) = 6
	!POSITIVE_MODAL_PATCHES(7,1) = 7
	!POSITIVE_MODAL_PATCHES(8,1) = 8
	!POSITIVE_MODAL_PATCHES(9,1) = 9
*ENDIF

! Open Input_EletricValues.txt
! The values in the .txt must have 4 decimal places
*DIM,ELETRIC_PARAMETERS,ARRAY,3*QNT_CIRCUITS,1, , , ,
*DIM,RESISTANCES,ARRAY,QNT_CIRCUITS,1, , , ,
*DIM,INDUCTANCES,ARRAY,QNT_CIRCUITS,1, , , ,
*DIM,CIRCUITS,ARRAY,QNT_CIRCUITS,1, , , ,

*VREAD,ELETRIC_PARAMETERS,'Input_EletricValues','txt',' ',IJK,3*QNT_CIRCUITS,1,1,,
(1F12.4)
!
! Resistence values
*DO, I, 1, QNT_CIRCUITS
	RESISTANCES(I,1)	= ELETRIC_PARAMETERS(I,1)
*ENDDO
! Inductance values
*DO, I, 1, QNT_CIRCUITS
	INDUCTANCES(I,1)	= ELETRIC_PARAMETERS(QNT_CIRCUITS + I,1)
*ENDDO
! Circuit types				
! 1 - Short-Circuit	
! 2 - Open-Circuit [without eletrical components]
! 3 - Circuit [with resistence]
! 4 - Circuit in serie [with resistence and inductance]
! 5 - Circuit in parallel [with resistence and inductance]
*DO, I, 1, QNT_CIRCUITS	
	CIRCUITS(I,1)		= ELETRIC_PARAMETERS(2*QNT_CIRCUITS + I,1)
*ENDDO
*ENDIF
!***_
!****_ 2.3 Material parameters [OK]
!	Aluminum [Plate]
E1		= 70e9								! [N/m2] Modulus of elasticity
NU1		= 0.33								! [adm] Poisson coefficient
RHO1		= 2700								! [kg/m3] Density
!
!	Piezoelectric [patches]
!	Anisotropic elastic
SE11 		= 16.5e-12 							! [m2/N]
SE12 		= -4.78e-12 							! [m2/N]
SE13 		= -8.45e-12 							! [m2/N]
SE14 		= 0	 							! [m2/N]
SE15 		= 0	 							! [m2/N]
SE16 		= 0	 							! [m2/N]
SE22 		= 16.5e-12 							! [m2/N]
SE23 		= -8.45e-12 							! [m2/N]
SE24 		= 0	 							! [m2/N]
SE25 		= 0	 							! [m2/N]
SE26 		= 0	 							! [m2/N]
SE33 		= 20.7e-12 							! [m2/N]
SE34 		= 0	 							! [m2/N]
SE35 		= 0	 							! [m2/N]
SE36 		= 0	 							! [m2/N]
SE44 		= 43.5e-12 							! [m2/N]
SE45 		= 0	 							! [m2/N]
SE46 		= 0	 							! [m2/N]
SE55 		= 43.5e-12 							! [m2/N]
SE56 		= 0	 							! [m2/N]
SE66 		= 42.6e-12 							! [m2/N]
! 	Piezoelectric - strain form
D13 		= -274e-12 							! [C/N]
D23 		= -274e-12 							! [C/N]
D33 		= 593e-12 							! [C/N]
D24 		= 741e-12 							! [C/N]
D15 		= 741e-12 							! [C/N]
! 	Relative permittivity
EP11 		= 3130
EP22 		= 3130
EP33 		= 3400
EP12		= 0
EP23		= 0
EP13		= 0
!
RHO2 		= 7500 								! [kg/m3] Density
!***_
!****_ 2.4 Patch positions - Center of each patch [OK]
*DIM,POSITION_PARAMETERS,ARRAY,2*QNTD_PATCHES,1, , , ,
*DIM,POSITIONS_PATCHES,ARRAY,QNTD_PATCHES,2, , , ,  

*VREAD,POSITION_PARAMETERS,'Input_PositionPatches','txt',' ',IJK,2*QNTD_PATCHES,1,1,,
(1F10.6)

iterator = 1
*DO,I,1,QNTD_PATCHES
	POSITIONS_PATCHES(I,1) = POSITION_PARAMETERS(iterator,1)
	POSITIONS_PATCHES(I,2) = POSITION_PARAMETERS(iterator+1,1)
	iterator = iterator + 2
*ENDDO

!***_
!****_ 2.5 Mesh parameters [OK]

LENGTH_MESH_PATCH	= 3.175e-3							! [m] Mesh size
LENGTH_MESH_PLATE	= 3.175e-3							! [m] Mesh size

!***_
!****_ 2.6 Load parameters [OK]
! Load
LOC_F_X_1		= 0.0000						! [m] Position x where the force is applied
LOC_F_Y_1		= 0.1085						! [m] Position y where the force is applied
LOC_F_X_2		= 0.0360
LOC_F_Y_2		= 0.0000
LOC_F_X_3		= 0.0690
LOC_F_Y_3		= 0.0000
F_VALUE_1		= -100							! [N] Force value [also put the orientation +/-]
F_VALUE_2		= -100
F_VALUE_3		= 0
!***_
!****_ 2.7 Analyses parameters [OK]
! Modal analyse
QNTD_MODES		= 10							! Quantities of modes

! Harmonic analyse
FREQ_MODE_EXCITED	= 244.75							! [Hz] Write the frequency of the mode you want to excit
MODE_EXCITED		= 7							! The mode of the frequency above
MIN_FREQ 		= 0.9*FREQ_MODE_EXCITED
MAX_FREQ		= 1.1*FREQ_MODE_EXCITED
NPTOS			= 162

!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    3. PRE PROCESSING                           _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
/PREP7
!****_ 3.1 Add materials to the list [OK]
!	Aluminum [Plate]
MP,EX,1,E1	 								! Young Modulus
MP,PRXY,1,NU1     								! Poisson coefficient
MP,DENS,1,RHO1									! Density
!	Piezoelectric [patches]
MP,DENS,2,RHO2									! Density
TB,DPER,2,,,1									! Relative permittivity
TBDATA,1,EP11,EP22,EP33,EP12,EP23,EP13
TB,ANEL,2,,,1 									! Anisotropic elastic
TBDATA,1,SE11,SE12,SE13
TBDATA,4,SE14,SE15,SE16
TBDATA,7,SE22,SE23,SE24
TBDATA,10,SE25,SE26,SE33
TBDATA,13,SE34,SE35,SE36
TBDATA,16,SE44,SE45,SE46
TBDATA,19,SE55,SE56,SE66
TB,PIEZ,2,,,1 									! Piezoelectric - strain form
TBDATA,3,d13
TBDATA,6,d23
TBDATA,9,d33
TBDATA,14,d24
TBDATA,16,d15
!***_
!****_ 3.2 Define element type [OK]
ET,1,SOLID186									! Plate

ET,2,SOLID226,1001								! Piezoelectric patches

*IF,SOLUTION_TYPE,EQ,1,THEN
ET,3,CIRCU94,0									! Resistances
*DO,I,1,QNT_CIRCUITS
	R,I,RESISTANCES(I,1), , , , , 
*ENDDO

ET,4,CIRCU94,1									! Inductances
*DO,I,1,QNT_CIRCUITS
	R,I+QNT_CIRCUITS,INDUCTANCES(I,1), , , , , 
*ENDDO
*ENDIF

!***_
!****_ 3.3 Create geometric model [OK]
!
!****_ 3.3.1 KeyPoints [OK]
		! Plate
K,,LPL/2,WPL/2,-TPL/2
K,,-LPL/2,WPL/2,-TPL/2
K,,-LPL/2,-WPL/2,-TPL/2
K,,LPL/2,-WPL/2,-TPL/2

K,,LPL/2,WPL/2,TPL/2
K,,-LPL/2,WPL/2,TPL/2
K,,-LPL/2,-WPL/2,TPL/2
K,,LPL/2,-WPL/2,TPL/2

		! Bottom patches
*DO,I,1,QNTD_PATCHES
	K,,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,-TPL/2
	K,,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,-TPL/2
	K,,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,-TPL/2
	K,,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,-TPL/2
*ENDDO

 		! Top patches
*DO,I,1,QNTD_PATCHES
	K,,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,TPL/2
	K,,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,TPL/2
	K,,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,TPL/2
	K,,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,TPL/2
*ENDDO

!***_
!****_ 3.3.2 Lines [OK]
		! Plate and patches
NUMBER_KEYPOINT		= 0
*DO,I,1,2*QNTD_PATCHES+2
	NUMBER_KEYPOINT = NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT-3
*ENDDO		

!***_
!****_ 3.3.3 Areas [OK]
		! Plate and patches
*DO,I,1,2*QNTD_PATCHES+2
	ALLSEL,ALL
	LSEL,S,LINE,,4*I-3,4*I
	AL,ALL,,
*ENDDO

!***_	
!****_ 3.3.4 Volumns [OK]

		! Plate
ALLSEL,ALL
VEXT,1, , ,0,0,TPL

		! Patches
		! Volumn of bottom patches
NUMBER_AREA = 2
*DO,I,1,QNTD_PATCHES
	NUMBER_AREA = NUMBER_AREA + 1
	ALLSEL,ALL
	VEXT,NUMBER_AREA, , ,0,0,-TPA
	
*ENDDO
		! Volumn of top patches
*DO,I,1,QNTD_PATCHES
	NUMBER_AREA = NUMBER_AREA + 1
	ALLSEL,ALL
	VEXT,NUMBER_AREA, , ,0,0,TPA
*ENDDO

ALLSEL, ALL
NUMMRG,KP,,,,
!***_
!***_
!****_ 3.4 Mesh [OK]

! Patch
*DO,I,1,QNTD_PATCHES
    ALLSEL,ALL
    LSEL,S,LOC,X,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,1)-LPA/2
    LSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)+WPA/2,POSITIONS_PATCHES(I,2)-WPA/2
    LESIZE,ALL,LENGTH_MESH_PATCH,,
*ENDDO

! Plate
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Y,WPL/2,-WPL/2
LESIZE,ALL,LENGTH_MESH_PLATE,,

! Thickness lines
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Y,WPL/2,-WPL/2
LSEL,R,LOC,Z,0,0
LSEL,A,LOC,Z,TPL/2+TPA/2
LSEL,A,LOC,Z,-TPL/2-TPA/2
LESIZE,ALL,,,TDIV

ALLSEL, ALL
NUMMRG,KP,,,,
NUMMRG,NODE,,,,
!***_
!****_ 3.5 Discretize the model [OK]
! Plate [OK]
ALLSEL,ALL
TYPE,1
MAT,1
MSHKEY,1
VSEL,S,LOC,Z,0,0
VMESH,ALL

! Patches [OK]
ALLSEL,ALL
TYPE,2
MAT,2
MSHKEY,1
VSEL,S,LOC,Z,TPL/2+TPA/2,TPL/2+TPA/2
VSEL,A,LOC,Z,-(TPL/2+TPA/2),-(TPL/2+TPA/2)
VMESH,ALL

ALLSEL, ALL
NUMMRG,KP,,,,
!***_

!****_ 3.6 Define contact surfaces [OK]
ALLSEL, ALL

CM,_NODECM,NODE 
CM,_ELEMCM,ELEM 
CM,_KPCM,KP 
CM,_LINECM,LINE 
CM,_AREACM,AREA 
CM,_VOLUCM,VOLU 
/GSAV,cwz,gsav,,temp
MP,MU,1,
MAT,1   
MP,EMIS,1,7.88860905221e-31 
R,2*QNT_CIRCUITS+1 
REAL,2*QNT_CIRCUITS+1   
ET,5,170
ET,6,175
R,2*QNT_CIRCUITS+1 ,,,1.0,0.1,0,
RMORE,,,1.0E20,0.0,1.0, 
RMORE,0.0,0,1.0,,1.0,0.5
RMORE,0,1.0,1.0,0.0,,1.0
RMORE,10.0,,,,,1.0  
KEYOPT,6,4,0
KEYOPT,6,5,0
KEYOPT,6,7,0
KEYOPT,6,8,0
KEYOPT,6,9,0
KEYOPT,6,10,0   
KEYOPT,6,11,0   
KEYOPT,6,12,5   
KEYOPT,6,14,0   
KEYOPT,6,18,0   
KEYOPT,6,2,0
KEYOPT,6,5,0
KEYOPT,6,1,5
! Generate the target surface   
ASEL,S,,,1  
CM,_TARGET,AREA 
TYPE,5  
NSLA,S,1
ESLN,S,0
ESLL,U  
ESEL,U,ENAME,,188,189   
NSLE,A,CT2  
ESURF   
CMSEL,S,_ELEMCM 
! Generate the contact surface  
ASEL,S,,,3,3+(QNTD_PATCHES-1) 
CM,_CONTACT,AREA
TYPE,6  
NSLA,S,1
ESLN,S,0
NSLE,A,CT2 ! CZMESH patch (fsk qt-40109 8/2008) 
ESURF

ALLSEL, ALL
! Generate the target surface   
ASEL,S,,,2  
CM,_TARGET,AREA 
TYPE,5  
NSLA,S,1
ESLN,S,0
ESLL,U  
ESEL,U,ENAME,,188,189   
NSLE,A,CT2  
ESURF   
CMSEL,S,_ELEMCM 
! Generate the contact surface  
ASEL,S,,,3+(QNTD_PATCHES),3+(2*QNTD_PATCHES-1)
CM,_CONTACT,AREA
TYPE,6  
NSLA,S,1
ESLN,S,0
NSLE,A,CT2 ! CZMESH patch (fsk qt-40109 8/2008) 
ESURF

! Clean Up and Save
ALLSEL,ALL        ! Select all elements and nodes
!***_

!****_ 3.7 Define equipotential surface in patches [OK]
!
*DIM,PATCH_NODE_POTENTIAL,ARRAY,2*QNTD_PATCHES,2,,,,				! The variable has 2 columns: Node[Out] | Node[In]
!										! This node, is the node that represent the inner
!										! and the outer surface of the patch
! Top patches
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,TPL/2+TPA,TPL/2+TPA					! Outer surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	CPMERGE,VOLT
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(I,1)	= NNODE
	
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,TPL/2,TPL/2						! Inner surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	CPMERGE,VOLT
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(I,2)	= NNODE
*ENDDO
! Bottom patches
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,-TPL/2-TPA,-TPL/2-TPA					! Outer surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	CPMERGE,VOLT
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(QNTD_PATCHES+I,1)	= NNODE
	
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,-TPL/2,-TPL/2						! Inner surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	CPMERGE,VOLT
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(QNTD_PATCHES+I,2)	= NNODE
*ENDDO

! According to the literature, the outer surfarces of z-symmetric patches must to be equal
*DO,I,1,QNTD_PATCHES
	! Outer surfaces
	ALLSEL,ALL
	CP,NEXT,VOLT,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)
	CPMERGE,VOLT
	
	! Inner surfaces
	ALLSEL,ALL
	CP,NEXT,VOLT,PATCH_NODE_POTENTIAL(I,2),PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,2)
	CPMERGE,VOLT
*ENDDO
	
! If it is a single shunt, the connection changes according to the modal charges
*DIM,NODES_CONNECTION,ARRAY,QNTD_PATCHES,2,,,,

FLAG = 0
*IF,SOLUTION_TYPE,EQ,1,THEN
	*IF,SHUNT_TYPE,EQ,1,THEN
		*DO,I,1,QNTD_PATCHES
			*DO,J,1,QNT_POSITIVE_MODAL_PATCHES
				*IF,I,EQ,POSITIVE_MODAL_PATCHES(J,1),THEN
					NODES_CONNECTION(I,1) = PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)
					NODES_CONNECTION(I,2) = PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,2)
					FLAG = 1
				*ENDIF
			*ENDDO
			*IF,FLAG,EQ,0,THEN
				NODES_CONNECTION(I,1) = PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,2)
				NODES_CONNECTION(I,2) = PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)
			*ENDIF
			FLAG = 0
		*ENDDO
		
		*IF,QNTD_PATCHES,GT,1,THEN
			*DO,I,1,QNTD_PATCHES-1
				ALLSEL,ALL
				CP,NEXT,VOLT,NODES_CONNECTION(I,1),NODES_CONNECTION(I+1,1)
				CPMERGE,VOLT
				
				ALLSEL,ALL
				CP,NEXT,VOLT,NODES_CONNECTION(I,2),NODES_CONNECTION(I+1,2)
				CPMERGE,VOLT
			*ENDDO
		*ENDIF
	*ENDIF
*ENDIF
ALLSEL,ALL
!***_
!****_ 3.8 Eletrical boundary conditions [OK]
! Ground nodes
ALLSEL,ALL
*IF,SOLUTION_TYPE,EQ,1,THEN

	*IF,SHUNT_TYPE,EQ,0,THEN
		*DO,I,1,QNTD_PATCHES
			D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,2),VOLT,0					! Restriction on the voltage degree of freedom
		*ENDDO

	*ELSEIF,SHUNT_TYPE,EQ,1,THEN
		D,NODES_CONNECTION(QNTD_PATCHES,2),VOLT,0
		CPMERGE,VOLT
	*ENDIF

*ELSEIF,SOLUTION_TYPE,EQ,0,THEN
	*DO,I,1,QNTD_PATCHES
		D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,2),VOLT,0					! Restriction on the voltage degree of freedom
	*ENDDO
*ENDIF
!***_
!****_ 3.9 Mechanical boundary conditions [OK]
! Simply supported
ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,X,-LPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,X,LPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,Y,-WPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,Y,WPL/2
D,ALL,UZ,0

! Fully restrain a Corner
ALLSEL,ALL
NSEL,S,LOC,X,-LPL/2
NSEL,R,LOC,Y,WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UX,0
D,ALL,UY,0

! Restrain another corner for the problem to be fully constrained
ALLSEL,ALL
NSEL,S,LOC,X,LPL/2
NSEL,R,LOC,Y,WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UX,0

ALLSEL,ALL
NSEL,S,LOC,X,LPL/2
NSEL,R,LOC,Y,-WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UY,0

ALLSEL,ALL
!***_
!****_ 3.10 Load [OK]
ALLSEL,ALL
*IF,F_VALUE_1,NE,0,THEN
NSEL,S,LOC,X,LOC_F_X_1-LENGTH_MESH_PLATE/2,LOC_F_X_1+LENGTH_MESH_PLATE/2
NSEL,R,LOC,Y,LOC_F_Y_1-LENGTH_MESH_PLATE/2,LOC_F_Y_1+LENGTH_MESH_PLATE/2
! LOC_F_Z depends on if the force is on the top of the plate or of the patch
LOC_F_Z		= TPL/2
*DO,I,1,QNTD_PATCHES
	*IF,LOC_F_X_1,LE,POSITIONS_PATCHES(I,1)+LPA/2,AND,LOC_F_X_1,GE,POSITIONS_PATCHES(I,1)-LPA/2,THEN
		*IF,LOC_F_Y_1,LE,POSITIONS_PATCHES(I,2)+WPA/2,AND,LOC_F_Y_1,GE,POSITIONS_PATCHES(I,2)-WPA/2,THEN
			LOC_F_Z		= TPL/2 !+ TPA
		*ENDIF
	*ENDIF
*ENDDO
NSEL,R,LOC,Z,LOC_F_Z
*GET,nodeForce,NODE,,NUM,MIN
F,nodeForce,FZ,F_VALUE_1
*ENDIF

ALLSEL,ALL
*IF,F_VALUE_2,NE,0,THEN
NSEL,S,LOC,X,LOC_F_X_2-LENGTH_MESH_PLATE/2,LOC_F_X_2+LENGTH_MESH_PLATE/2
NSEL,R,LOC,Y,LOC_F_Y_2-LENGTH_MESH_PLATE/2,LOC_F_Y_2+LENGTH_MESH_PLATE/2
! LOC_F_Z depends on if the force is on the top of the plate or of the patch
LOC_F_Z		= TPL/2
*DO,I,1,QNTD_PATCHES
	*IF,LOC_F_X_2,LE,POSITIONS_PATCHES(I,1)+LPA/2,AND,LOC_F_X_2,GE,POSITIONS_PATCHES(I,1)-LPA/2,THEN
		*IF,LOC_F_Y_2,LE,POSITIONS_PATCHES(I,2)+WPA/2,AND,LOC_F_Y_2,GE,POSITIONS_PATCHES(I,2)-WPA/2,THEN
			LOC_F_Z		= TPL/2 !+ TPA
		*ENDIF
	*ENDIF
*ENDDO
NSEL,R,LOC,Z,LOC_F_Z
*GET,nodeForce,NODE,,NUM,MIN
F,nodeForce,FZ,F_VALUE_2
*ENDIF

ALLSEL,ALL
*IF,F_VALUE_3,NE,0,THEN
NSEL,S,LOC,X,LOC_F_X_3-LENGTH_MESH_PLATE/2,LOC_F_X_3+LENGTH_MESH_PLATE/2
NSEL,R,LOC,Y,LOC_F_Y_3-LENGTH_MESH_PLATE/2,LOC_F_Y_3+LENGTH_MESH_PLATE/2
! LOC_F_Z depends on if the force is on the top of the plate or of the patch
LOC_F_Z		= TPL/2
*DO,I,1,QNTD_PATCHES
	*IF,LOC_F_X_3,LE,POSITIONS_PATCHES(I,1)+LPA/2,AND,LOC_F_X_3,GE,POSITIONS_PATCHES(I,1)-LPA/2,THEN
		*IF,LOC_F_Y_3,LE,POSITIONS_PATCHES(I,2)+WPA/2,AND,LOC_F_Y_3,GE,POSITIONS_PATCHES(I,2)-WPA/2,THEN
			LOC_F_Z		= TPL/2 !+ TPA
		*ENDIF
	*ENDIF
*ENDDO
NSEL,R,LOC,Z,LOC_F_Z
*GET,nodeForce,NODE,,NUM,MIN
F,nodeForce,FZ,F_VALUE_3
*ENDIF

ALLSEL,ALL
!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    4. PRE PROCESSING - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
! Don't need to do nothing, because is just open 
CPMERGE,VOLT
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    5. SOLVER         - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,THEN
/SOLU
ANTYPE,MODAL									! Define the type of analysis [Modal]
MODOPT,LANB,QNTD_MODES,0,500, ,OFF   						! Define the quantities of modes to analyse
EQSLV,SPAR									! Solution method
MXPAND,QNTD_MODES, , ,1
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
ALLSEL,ALL
SOLVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    6. POS PROCESSING - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
*IF,SOLUTION_TYPE,EQ,0,THEN
! Modal results
/POST1										! General PostProc
SET,LIST									! List the modal frequency

*DIM,FREQ_MODE_OPEN,ARRAY,QNTD_MODES,1, , , ,
*DIM,VR_PATCH,ARRAY,QNTD_PATCHES,QNTD_MODES, , , ,				! This vector has the modal voltage present in each patch

*DO,I,1,QNTD_MODES								! Get the frequency of each mode
	*GET,FREQ_MODE_OPEN(I,1),MODE,I,FREQ
*ENDDO
*DO,J,1,QNTD_MODES								! Get the modal charge or the modal voltage
	SET,,,,,,,J
	*DO,I,1,QNTD_PATCHES					
	! Obtain modal voltage
		*GET,VR_PATCH(I,J),NODE,PATCH_NODE_POTENTIAL(I,1),VOLT
	*ENDDO
*ENDDO
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    7. PRE PROCESSING - Modal [Short Circuit]    ****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,THEN
! Circuit type - [OK]
/PREP7
ALLSEL,ALL
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT,0				! We can restrict just this outer face because the top and the botton patches
										! are couppled
*ENDDO
CPMERGE,VOLT
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    8. SOLVER         - Modal [Short Circuit]   _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,THEN
/SOLU
ANTYPE,MODAL									! Define the type of analysis [Modal]
MODOPT,LANB,QNTD_MODES,0,500, ,OFF   						! Define the quantities of modes to analyse
EQSLV,SPAR									! Solution method
MXPAND,QNTD_MODES, , ,1
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
ALLSEL,ALL
SOLVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    9. POS PROCESSING - Modal [Short Circuit]   _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
! Modal results
*IF,SOLUTION_TYPE,EQ,0,THEN
/POST1										! General PostProc
SET,LIST									! List the modal frequency

*DIM,FREQ_MODE_SHORT,ARRAY,QNTD_MODES,1, , , ,
*DIM,EMCC,ARRAY,QNTD_MODES,1, , , ,
*DIM,QR_PATCH,ARRAY,QNTD_PATCHES,QNTD_MODES, , , ,				! This vector has the modal charge present in each patch
*DIM,QR_TOTAL,ARRAY,QNTD_MODES,1, , , ,

*DO,I,1,QNTD_MODES								! Get the frequency of each mode
	*GET,FREQ_MODE_SHORT(I,1),MODE,I,FREQ
*ENDDO
*DO,I,1,QNTD_MODES								! Get the EMCC of each mode
	EMCC(I,1) = 100*(FREQ_MODE_OPEN(I,1)*FREQ_MODE_OPEN(I,1)-FREQ_MODE_SHORT(I,1)*FREQ_MODE_SHORT(I,1))/(FREQ_MODE_SHORT(I,1)*FREQ_MODE_SHORT(I,1))
*ENDDO
*DO,J,1,QNTD_MODES								! Get the modal charge or the modal voltage
	SET,,,,,,,J
	*DO,I,1,QNTD_PATCHES
	! Obtain modal charge
		*GET,QR_PATCH(I,J),NODE,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),RF,CHRG
	*ENDDO
*ENDDO
*DO,J,1,QNTD_MODES
	SUM = 0
	*DO,I,1,QNTD_PATCHES
		*IF,QR_PATCH(I,J),GT,0,THEN
			SUM = SUM + QR_PATCH(I,J)
		*ELSE
			SUM = SUM - QR_PATCH(I,J)
		*ENDIF
	*ENDDO
	QR_TOTAL(J,1) = SUM
*ENDDO

*CFOPEN,Output_EMCC,txt 							! Open file to store EMCC results 
*VWRITE,EMCC(1)
(F8.5)
*CFCLOS
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   10. PRE PROCESSING - Harmonic		       ****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,1,THEN
/PREP7
! Multiple Shunt - [OK]
*IF,SHUNT_TYPE,EQ,0,THEN								
	! Circuit type - [OK]
	*DO,I,1,QNT_CIRCUITS
		ALLSEL,ALL
		*IF,SOLUTION_TYPE,EQ,2,THEN
			DDELE,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT			! Remove Short Circuit Restriction
		*ENDIF
		
		CIRCUIT		= CIRCUITS(I,1)
		
		*IF,CIRCUIT,LT,1.5,AND,CIRCUIT,GT,0.5,THEN					! Short-Circuit		
			D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT,0				! We can restrict just this outer face because the top and the botton patches
												! are couppled
												
		*ELSEIF,CIRCUIT,LT,2.5,AND,CIRCUIT,GT,1.5,THEN					! Open-Circuit
												! Dont have to do nothing, is just open
		*ELSEIF,CIRCUIT,LT,3.5,AND,CIRCUIT,GT,2.5,THEN					! Circuit [with resistence]
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)
			
		*ELSEIF,CIRCUIT,LT,4.5,AND,CIRCUIT,GT,3.5,THEN					! Circuit in serie [with resistence and inductance]
			! Auxiliary node
			N,,POSITIONS_PATCHES(I,1),POSITIONS_PATCHES(I,2),TPL/2+TPA*1.5		! The position can be anywhere
			*GET,AUXILIARY_NODE,NODE,,NUM,MAX
	!		D,AUXILIARY_NODE,UX,mnodeT,1,0.0,0.0,UY,UZ				! I dont know why I need this
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),AUXILIARY_NODE
			! Inductances
			Type,4
			real,I+QNT_CIRCUITS
			e,PATCH_NODE_POTENTIAL(I,2),AUXILIARY_NODE
			
		*ELSEIF,CIRCUIT,LT,5.5,AND,CIRCUIT,GT,4.5,THEN					! Circuit in parallel [with resistence and inductance]
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)
			! Inductances
			Type,4
			real,I+QNT_CIRCUITS
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)	
		*ENDIF
	*ENDDO
!
!
! Single Shunt - [OK]
*ELSEIF,SHUNT_TYPE,EQ,1,THEN
	! Circuit type - [OK]
	*DO,I,1,QNT_CIRCUITS
		ALLSEL,ALL
		*IF,SOLUTION_TYPE,EQ,2,THEN
			DDELE,NODES_CONNECTION(QNTD_PATCHES,1),VOLT			! Remove Short Circuit Restriction
		*ENDIF
		
		CIRCUIT		= CIRCUITS(I,1)
		
		*IF,CIRCUIT,LT,1.5,AND,CIRCUIT,GT,0.5,THEN					! Short-Circuit		
			D,NODES_CONNECTION(QNTD_PATCHES,1),VOLT,0				! We can restrict just this outer face because the top and the botton patches
												! are couppled
												
		*ELSEIF,CIRCUIT,LT,2.5,AND,CIRCUIT,GT,1.5,THEN					! Open-Circuit
												! Dont have to do nothing, is just open
		*ELSEIF,CIRCUIT,LT,3.5,AND,CIRCUIT,GT,2.5,THEN					! Circuit [with resistence]
			! Resistances
			Type,3
			real,I
			e,NODES_CONNECTION(QNTD_PATCHES,1),NODES_CONNECTION(QNTD_PATCHES,2)
			
		*ELSEIF,CIRCUIT,LT,4.5,AND,CIRCUIT,GT,3.5,THEN					! Circuit in serie [with resistence and inductance]
			! Auxiliary node
			N,,POSITIONS_PATCHES(I,1),POSITIONS_PATCHES(I,2),TPL/2+TPA*1.5		! The position can be anywhere
			*GET,AUXILIARY_NODE,NODE,,NUM,MAX
	!		D,AUXILIARY_NODE,UX,mnodeT,1,0.0,0.0,UY,UZ				! I dont know why I need this
			! Resistances
			Type,3
			real,I
			e,NODES_CONNECTION(QNTD_PATCHES,1),AUXILIARY_NODE
			! Inductances
			Type,4
			real,I+QNT_CIRCUITS
			e,NODES_CONNECTION(QNTD_PATCHES,2),AUXILIARY_NODE
			
		*ELSEIF,CIRCUIT,LT,5.5,AND,CIRCUIT,GT,4.5,THEN					! Circuit in parallel [with resistence and inductance]
			! Resistances
			Type,3
			real,I
			e,NODES_CONNECTION(QNTD_PATCHES,1),NODES_CONNECTION(QNTD_PATCHES,2)
			! Inductances
			Type,4
			real,I+QNT_CIRCUITS
			e,NODES_CONNECTION(QNTD_PATCHES,1),NODES_CONNECTION(QNTD_PATCHES,2)	
		*ENDIF
	*ENDDO
	
*ENDIF
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   11. SOLVER         - Harmonic                 ****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,1,THEN
/SOLU
ANTYPE,HARMIC									! Define the type of analysis [Harmonic]
HROPT,FULL									! Method FULL for the harmonic analysis
HROUT,ON									! Can be either ON(complex) or OFF(mag,phase) and does not 
										! influence the VGET command in POST26 
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
EQSLV,,1e-8,
HARFRQ,MIN_FREQ,MAX_FREQ
NSUBST,NPTOS,							! Quantities of substeps
KBC,1 								! 0 - Ramp, 1 - Step
SOlVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   12. POS PROCESSING - Harmonic                _****!
!			   Status: OK			      		   !
!--------------------------------------------------------------------------! 
! Harmonic results
*IF,SOLUTION_TYPE,EQ,1,THEN
/POST26
*DIM,FRD,ARRAY,NPTOS,2
*DIM,AMP,ARRAY,NPTOS,1
*DIM,DATA_FREQUENCY,ARRAY,NPTOS+1,1

DATA_FREQUENCY(1,1)	= FREQ_MODE_EXCITED					! Get frequency excited
		
NSOL,2,nodeForce,U,Z,
VGET,DATA_FREQUENCY(2,1),1,,0
VGET,FRD(1,1),2,,0 								! Real part
VGET,FRD(1,2),2,,1 								! Imaginary part

*DO,i,1,NPTOS,1
	AMP(i)=sqrt(frd(i,1)**2+frd(i,2)**2) 					! Amplitude
*ENDDO

*CFOPEN,Output_DataAmplitude,txt 						! Open file to store results 
*VWRITE,AMP(1)
(F15.6)
*CFCLOS
*CFOPEN,Output_DataFrequency,txt 						! Open file to store results 
*VWRITE,DATA_FREQUENCY(1)
(F12.4)
*CFCLOS
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
FINISH
